# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class User(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, username: str=None, email: str=None, password: str=None, description: str=None, photo_url: str=None, balance: int=None):  # noqa: E501
        """User - a model defined in Swagger

        :param id: The id of this User.  # noqa: E501
        :type id: str
        :param username: The username of this User.  # noqa: E501
        :type username: str
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param password: The password of this User.  # noqa: E501
        :type password: str
        :param description: The description of this User.  # noqa: E501
        :type description: str
        :param photo_url: The photo_url of this User.  # noqa: E501
        :type photo_url: str
        :param balance: The balance of this User.  # noqa: E501
        :type balance: int
        """
        self.swagger_types = {
            'id': str,
            'username': str,
            'email': str,
            'password': str,
            'description': str,
            'photo_url': str,
            'balance': int
        }

        self.attribute_map = {
            'id': 'id',
            'username': 'username',
            'email': 'email',
            'password': 'password',
            'description': 'description',
            'photo_url': 'photoURL',
            'balance': 'balance'
        }

        self._id = id
        self._username = username
        self._email = email
        self._password = password
        self._description = description
        self._photo_url = photo_url
        self._balance = balance

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: str
        """

        self._id = id

    @property
    def username(self) -> str:
        """Gets the username of this User.


        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this User.


        :param username: The username of this User.
        :type username: str
        """

        self._username = username

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def password(self) -> str:
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """

        self._password = password

    @property
    def description(self) -> str:
        """Gets the description of this User.


        :return: The description of this User.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this User.


        :param description: The description of this User.
        :type description: str
        """

        self._description = description

    @property
    def photo_url(self) -> str:
        """Gets the photo_url of this User.


        :return: The photo_url of this User.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url: str):
        """Sets the photo_url of this User.


        :param photo_url: The photo_url of this User.
        :type photo_url: str
        """

        self._photo_url = photo_url

    @property
    def balance(self) -> int:
        """Gets the balance of this User.


        :return: The balance of this User.
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance: int):
        """Sets the balance of this User.


        :param balance: The balance of this User.
        :type balance: int
        """

        self._balance = balance
