# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.image import Image
from swagger_server import util


class Collection(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, user_id: str=None, name: str=None, detail: str=None, images: List[Image]=None):  # noqa: E501
        """Collection - a model defined in Swagger

        :param user_id: The user_id of this Collection.  # noqa: E501
        :type user_id: str
        :param name: The name of this Collection.  # noqa: E501
        :type name: str
        :param detail: The detail of this Collection.  # noqa: E501
        :type detail: str
        :param images: The images of this Collection.  # noqa: E501
        :type images: List[Image]
        """
        self.swagger_types = {
            'user_id': str,
            'name': str,
            'detail': str,
            'images': List[Image]
        }

        self.attribute_map = {
            'user_id': 'userID',
            'name': 'name',
            'detail': 'detail',
            'images': 'images'
        }

        self._user_id = user_id
        self._name = name
        self._detail = detail
        self._images = images

    @classmethod
    def from_dict(cls, dikt) -> 'Collection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Collection of this Collection.  # noqa: E501
        :rtype: Collection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this Collection.


        :return: The user_id of this Collection.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this Collection.


        :param user_id: The user_id of this Collection.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def name(self) -> str:
        """Gets the name of this Collection.


        :return: The name of this Collection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Collection.


        :param name: The name of this Collection.
        :type name: str
        """

        self._name = name

    @property
    def detail(self) -> str:
        """Gets the detail of this Collection.


        :return: The detail of this Collection.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail: str):
        """Sets the detail of this Collection.


        :param detail: The detail of this Collection.
        :type detail: str
        """

        self._detail = detail

    @property
    def images(self) -> List[Image]:
        """Gets the images of this Collection.


        :return: The images of this Collection.
        :rtype: List[Image]
        """
        return self._images

    @images.setter
    def images(self, images: List[Image]):
        """Sets the images of this Collection.


        :param images: The images of this Collection.
        :type images: List[Image]
        """

        self._images = images
