# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Comment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, image_id: str=None, user_id: str=None, time: datetime=None, status: str=None, detail: str=None):  # noqa: E501
        """Comment - a model defined in Swagger

        :param image_id: The image_id of this Comment.  # noqa: E501
        :type image_id: str
        :param user_id: The user_id of this Comment.  # noqa: E501
        :type user_id: str
        :param time: The time of this Comment.  # noqa: E501
        :type time: datetime
        :param status: The status of this Comment.  # noqa: E501
        :type status: str
        :param detail: The detail of this Comment.  # noqa: E501
        :type detail: str
        """
        self.swagger_types = {
            'image_id': str,
            'user_id': str,
            'time': datetime,
            'status': str,
            'detail': str
        }

        self.attribute_map = {
            'image_id': 'imageID',
            'user_id': 'userID',
            'time': 'time',
            'status': 'status',
            'detail': 'detail'
        }

        self._image_id = image_id
        self._user_id = user_id
        self._time = time
        self._status = status
        self._detail = detail

    @classmethod
    def from_dict(cls, dikt) -> 'Comment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Comment of this Comment.  # noqa: E501
        :rtype: Comment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_id(self) -> str:
        """Gets the image_id of this Comment.


        :return: The image_id of this Comment.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id: str):
        """Sets the image_id of this Comment.


        :param image_id: The image_id of this Comment.
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def user_id(self) -> str:
        """Gets the user_id of this Comment.


        :return: The user_id of this Comment.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this Comment.


        :param user_id: The user_id of this Comment.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def time(self) -> datetime:
        """Gets the time of this Comment.


        :return: The time of this Comment.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time: datetime):
        """Sets the time of this Comment.


        :param time: The time of this Comment.
        :type time: datetime
        """

        self._time = time

    @property
    def status(self) -> str:
        """Gets the status of this Comment.


        :return: The status of this Comment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Comment.


        :param status: The status of this Comment.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def detail(self) -> str:
        """Gets the detail of this Comment.


        :return: The detail of this Comment.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail: str):
        """Sets the detail of this Comment.


        :param detail: The detail of this Comment.
        :type detail: str
        """

        self._detail = detail
