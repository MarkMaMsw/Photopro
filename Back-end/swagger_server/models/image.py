# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.tag import Tag
from swagger_server import util


class Image(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, title: str=None, price: int=None, user_id: str=None, status: str=None, tags: List[Tag]=None):  # noqa: E501
        """Image - a model defined in Swagger

        :param id: The id of this Image.  # noqa: E501
        :type id: str
        :param title: The title of this Image.  # noqa: E501
        :type title: str
        :param price: The price of this Image.  # noqa: E501
        :type price: int
        :param user_id: The user_id of this Image.  # noqa: E501
        :type user_id: str
        :param status: The status of this Image.  # noqa: E501
        :type status: str
        :param tags: The tags of this Image.  # noqa: E501
        :type tags: List[Tag]
        """
        self.swagger_types = {
            'id': str,
            'title': str,
            'price': int,
            'user_id': str,
            'status': str,
            'tags': List[Tag]
        }

        self.attribute_map = {
            'id': 'id',
            'title': 'title',
            'price': 'price',
            'user_id': 'userID',
            'status': 'status',
            'tags': 'tags'
        }

        self._id = id
        self._title = title
        self._price = price
        self._user_id = user_id
        self._status = status
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'Image':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Image of this Image.  # noqa: E501
        :rtype: Image
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Image.


        :return: The id of this Image.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Image.


        :param id: The id of this Image.
        :type id: str
        """

        self._id = id

    @property
    def title(self) -> str:
        """Gets the title of this Image.


        :return: The title of this Image.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Image.


        :param title: The title of this Image.
        :type title: str
        """

        self._title = title

    @property
    def price(self) -> int:
        """Gets the price of this Image.


        :return: The price of this Image.
        :rtype: int
        """
        return self._price

    @price.setter
    def price(self, price: int):
        """Sets the price of this Image.


        :param price: The price of this Image.
        :type price: int
        """

        self._price = price

    @property
    def user_id(self) -> str:
        """Gets the user_id of this Image.


        :return: The user_id of this Image.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this Image.


        :param user_id: The user_id of this Image.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def status(self) -> str:
        """Gets the status of this Image.


        :return: The status of this Image.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this Image.


        :param status: The status of this Image.
        :type status: str
        """
        allowed_values = ["on shop", "off shop"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tags(self) -> List[Tag]:
        """Gets the tags of this Image.


        :return: The tags of this Image.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[Tag]):
        """Sets the tags of this Image.


        :param tags: The tags of this Image.
        :type tags: List[Tag]
        """

        self._tags = tags
