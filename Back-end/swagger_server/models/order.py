# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.image import Image
from swagger_server import util


class Order(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, user_id: str=None, images: List[Image]=None, time: datetime=None, total_price: int=None):  # noqa: E501
        """Order - a model defined in Swagger

        :param id: The id of this Order.  # noqa: E501
        :type id: str
        :param user_id: The user_id of this Order.  # noqa: E501
        :type user_id: str
        :param images: The images of this Order.  # noqa: E501
        :type images: List[Image]
        :param time: The time of this Order.  # noqa: E501
        :type time: datetime
        :param total_price: The total_price of this Order.  # noqa: E501
        :type total_price: int
        """
        self.swagger_types = {
            'id': str,
            'user_id': str,
            'images': List[Image],
            'time': datetime,
            'total_price': int
        }

        self.attribute_map = {
            'id': 'id',
            'user_id': 'userID',
            'images': 'images',
            'time': 'time',
            'total_price': 'totalPrice'
        }

        self._id = id
        self._user_id = user_id
        self._images = images
        self._time = time
        self._total_price = total_price

    @classmethod
    def from_dict(cls, dikt) -> 'Order':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Order of this Order.  # noqa: E501
        :rtype: Order
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Order.


        :return: The id of this Order.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Order.


        :param id: The id of this Order.
        :type id: str
        """

        self._id = id

    @property
    def user_id(self) -> str:
        """Gets the user_id of this Order.


        :return: The user_id of this Order.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this Order.


        :param user_id: The user_id of this Order.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def images(self) -> List[Image]:
        """Gets the images of this Order.


        :return: The images of this Order.
        :rtype: List[Image]
        """
        return self._images

    @images.setter
    def images(self, images: List[Image]):
        """Sets the images of this Order.


        :param images: The images of this Order.
        :type images: List[Image]
        """

        self._images = images

    @property
    def time(self) -> datetime:
        """Gets the time of this Order.


        :return: The time of this Order.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time: datetime):
        """Sets the time of this Order.


        :param time: The time of this Order.
        :type time: datetime
        """

        self._time = time

    @property
    def total_price(self) -> int:
        """Gets the total_price of this Order.


        :return: The total_price of this Order.
        :rtype: int
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price: int):
        """Sets the total_price of this Order.


        :param total_price: The total_price of this Order.
        :type total_price: int
        """

        self._total_price = total_price
