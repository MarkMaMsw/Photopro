# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Search(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, user_id: str=None, keyword: str=None, time: datetime=None, search_type: str=None):  # noqa: E501
        """Search - a model defined in Swagger

        :param user_id: The user_id of this Search.  # noqa: E501
        :type user_id: str
        :param keyword: The keyword of this Search.  # noqa: E501
        :type keyword: str
        :param time: The time of this Search.  # noqa: E501
        :type time: datetime
        :param search_type: The search_type of this Search.  # noqa: E501
        :type search_type: str
        """
        self.swagger_types = {
            'user_id': str,
            'keyword': str,
            'time': datetime,
            'search_type': str
        }

        self.attribute_map = {
            'user_id': 'userID',
            'keyword': 'keyword',
            'time': 'time',
            'search_type': 'searchType'
        }

        self._user_id = user_id
        self._keyword = keyword
        self._time = time
        self._search_type = search_type

    @classmethod
    def from_dict(cls, dikt) -> 'Search':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Search of this Search.  # noqa: E501
        :rtype: Search
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_id(self) -> str:
        """Gets the user_id of this Search.


        :return: The user_id of this Search.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this Search.


        :param user_id: The user_id of this Search.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def keyword(self) -> str:
        """Gets the keyword of this Search.


        :return: The keyword of this Search.
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword: str):
        """Sets the keyword of this Search.


        :param keyword: The keyword of this Search.
        :type keyword: str
        """

        self._keyword = keyword

    @property
    def time(self) -> datetime:
        """Gets the time of this Search.


        :return: The time of this Search.
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time: datetime):
        """Sets the time of this Search.


        :param time: The time of this Search.
        :type time: datetime
        """

        self._time = time

    @property
    def search_type(self) -> str:
        """Gets the search_type of this Search.


        :return: The search_type of this Search.
        :rtype: str
        """
        return self._search_type

    @search_type.setter
    def search_type(self, search_type: str):
        """Sets the search_type of this Search.


        :param search_type: The search_type of this Search.
        :type search_type: str
        """
        allowed_values = ["Image", "Creater"]  # noqa: E501
        if search_type not in allowed_values:
            raise ValueError(
                "Invalid value for `search_type` ({0}), must be one of {1}"
                .format(search_type, allowed_values)
            )

        self._search_type = search_type
